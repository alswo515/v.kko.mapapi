{"version":3,"sources":["MapContainer.js","SearchPlace.js","App.js","index.js"],"names":["kakao","window","MapContainer","searchPlace","useEffect","infowindow","maps","InfoWindow","zIndex","container","document","getElementById","options","center","LatLng","level","map","Map","displayMarker","place","marker","Marker","position","y","x","event","addListener","setContent","place_name","open","services","Places","keywordSearch","data","status","pagination","Status","OK","bounds","LatLngBounds","i","length","extend","setBounds","navigator","geolocation","getCurrentPosition","lat","coords","latitude","lon","longitude","displayMarker1","locPosition","message","iwContent","content","removable","setCenter","id","style","width","height","SearchPlace","useState","inputText","setInputText","elInput","useRef","setPlace","className","onSubmit","e","preventDefault","current","focus","placeholder","onChange","target","value","ref","type","App","ReactDOM","render","StrictMode"],"mappings":"0JAEQA,EAAUC,OAAVD,MAwFOE,EAtFM,SAAC,GAAmB,IAAlBC,EAAiB,EAAjBA,YA8EnB,OA5EAC,qBAAU,WACN,IAAIC,EAAa,IAAIL,EAAMM,KAAKC,WAAW,CAACC,OAAO,IAC7CC,EAAYC,SAASC,eAAe,SAEtCC,EAAU,CACbC,OAAQ,IAAIb,EAAMM,KAAKQ,OAAO,UAAW,YACzCC,MAAO,GAEHC,EAAM,IAAIhB,EAAMM,KAAKW,IAAIR,EAAWG,GAiB7C,SAASM,EAAcC,GACnB,IAAIC,EAAS,IAAIpB,EAAMM,KAAKe,OAAO,CAC/BL,IAAKA,EACLM,SAAU,IAAItB,EAAMM,KAAKQ,OAAOK,EAAMI,EAAGJ,EAAMK,KAEnDxB,EAAMM,KAAKmB,MAAMC,YAAYN,EAAQ,SAAS,WAC9Cf,EAAWsB,WAAW,4CAA8CR,EAAMS,WAAa,UACvFvB,EAAWwB,KAAKb,EAAKI,MAKzB,IA1Bc,IAAIpB,EAAMM,KAAKwB,SAASC,QAChCC,cAAc7B,GAEhB,SAAyB8B,EAAMC,EAAQC,GACvC,GAAID,IAAWlC,EAAMM,KAAKwB,SAASM,OAAOC,GAAI,CAE9C,IADA,IAAIC,EAAS,IAAItC,EAAMM,KAAKiC,aACnBC,EAAE,EAAGA,EAAEP,EAAKQ,OAAQD,IACzBtB,EAAce,EAAKO,IACnBF,EAAOI,OAAO,IAAI1C,EAAMM,KAAKQ,OAAOmB,EAAKO,GAAGjB,EAAGU,EAAKO,GAAGhB,IAE3DR,EAAI2B,UAAUL,OAgBdM,UAAUC,YACVD,UAAUC,YAAYC,oBAAmB,SAASxB,GAE9C,IAAIyB,EAAMzB,EAAS0B,OAAOC,SACtBC,EAAM5B,EAAS0B,OAAOG,UAK1BC,EAHkB,IAAIpD,EAAMM,KAAKQ,OAAOiC,EAAKG,GAC/B,wFAMf,CAGHE,EAFkB,IAAIpD,EAAMM,KAAKQ,OAAO,UAAW,YACrC,mEAIlB,SAASsC,EAAeC,EAAaC,GACjC,IAAIlC,EAAS,IAAIpB,EAAMM,KAAKe,OAAO,CAC/BL,IAAKA,EACLM,SAAU+B,IAEVE,EAAYD,EAEC,IAAItD,EAAMM,KAAKC,WAAW,CACvCiD,QAAUD,EACVE,WAHe,IAKR5B,KAAKb,EAAKI,GACrBJ,EAAI0C,UAAUL,MAIf,CAAClD,IAKA,qBAAKwD,GAAG,QAAQC,MAAO,CACnBC,MAAO,QACPC,OAAQ,YCtDLC,EA5BK,WAAO,IAAD,EACWC,mBAAS,IADpB,mBACfC,EADe,KACLC,EADK,KAEhBC,EAAUC,mBAFM,EAMGJ,mBAAS,IANZ,mBAMf7C,EANe,KAMTkD,EANS,KAetB,OACI,gCACI,uBAAMC,UAAU,YAAYC,SATnB,SAACC,GACdA,EAAEC,iBACFJ,EAASJ,GACTC,EAAa,IACbC,EAAQO,QAAQC,SAKZ,UACI,uBAAOC,YAAY,2BAAOC,SAfpB,SAACL,GACfN,EAAaM,EAAEM,OAAOC,QAcgCA,MAAOd,EAAWe,IAAKb,IACrE,wBAAQc,KAAM,SAAd,6BAIJ,cAAC,EAAD,CAAc9E,YAAagB,QCfxB+D,EARH,WACR,OACI,8BACI,cAAC,EAAD,OCFZC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEF3E,SAASC,eAAe,W","file":"static/js/main.9b6e493d.chunk.js","sourcesContent":["import React, { useEffect } from 'react';\r\n\r\nconst { kakao } = window;\r\n\r\nconst MapContainer = ({searchPlace}) => {\r\n    \r\n    useEffect(() => {\r\n        let infowindow = new kakao.maps.InfoWindow({zIndex:1});\r\n        const container = document.getElementById('myMap');\r\n\r\n      const options = {\r\n         center: new kakao.maps.LatLng(33.450701, 126.570667),\r\n         level: 3\r\n      };\r\n       const map = new kakao.maps.Map(container, options);\r\n\r\n       //키워드로 장소검색하기\r\n       const ps = new kakao.maps.services.Places(); \r\n       ps.keywordSearch(searchPlace, placesSearchCB); \r\n      \r\n        function placesSearchCB (data, status, pagination) {\r\n        if (status === kakao.maps.services.Status.OK) {\r\n        let bounds = new kakao.maps.LatLngBounds();\r\n        for (let i=0; i<data.length; i++) {\r\n            displayMarker(data[i]);    \r\n            bounds.extend(new kakao.maps.LatLng(data[i].y, data[i].x));\r\n        }       \r\n        map.setBounds(bounds);\r\n    } \r\n    }\r\n\r\n    function displayMarker(place) {\r\n        let marker = new kakao.maps.Marker({\r\n            map: map,\r\n            position: new kakao.maps.LatLng(place.y, place.x) \r\n        });\r\n        kakao.maps.event.addListener(marker, 'click', function() {\r\n        infowindow.setContent('<div style=\"padding:5px;font-size:12px;\">' + place.place_name + '</div>');\r\n        infowindow.open(map, marker);\r\n        });\r\n    }\r\n\r\n    //현재위치에 포커싱하기 (geolocation 으로 마커표시하기)\r\n    if (navigator.geolocation) {\r\n        navigator.geolocation.getCurrentPosition(function(position) {\r\n            \r\n            var lat = position.coords.latitude, // 위도\r\n                lon = position.coords.longitude; // 경도\r\n            \r\n            var locPosition = new kakao.maps.LatLng(lat, lon),\r\n                message = '<div style=\"padding:5px;\">여기에 계신가요?!</div>';\r\n            \r\n            displayMarker1(locPosition, message);\r\n                \r\n          });\r\n        \r\n    } else {\r\n        var locPosition = new kakao.maps.LatLng(33.450701, 126.570667),    \r\n            message = 'geolocation을 사용할수 없어요..'\r\n        displayMarker1(locPosition, message);\r\n    }\r\n    \r\n    function displayMarker1(locPosition, message) {\r\n        var marker = new kakao.maps.Marker({  \r\n            map: map, \r\n            position: locPosition\r\n        }); \r\n        var iwContent = message,\r\n            iwRemoveable = true;\r\n        var infowindow = new kakao.maps.InfoWindow({\r\n            content : iwContent,\r\n            removable : iwRemoveable\r\n        });\r\n        infowindow.open(map, marker);\r\n        map.setCenter(locPosition);      \r\n    }    \r\n\r\n\r\n    }, [searchPlace]);\r\n\r\n \r\n\r\n    return (\r\n        <div id='myMap' style={{\r\n            width: '500px', \r\n            height: '500px'\r\n        }}></div>\r\n    );\r\n}\r\n\r\nexport default MapContainer;","import React, { useState, useRef } from 'react';\r\nimport MapContainer from './MapContainer';\r\n\r\nconst SearchPlace = () => {\r\n    const [inputText,setInputText] = useState(\"\");\r\n    const elInput = useRef()\r\n    const onChange  = (e) => {\r\n        setInputText(e.target.value)    //inputText value 값을 접근한다\r\n    }\r\n    const [place,setPlace] = useState(\"\");\r\n\r\n    const onSubmit = (e) => {\r\n        e.preventDefault();\r\n        setPlace(inputText);\r\n        setInputText(\"\");\r\n        elInput.current.focus();\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <form className=\"inputForm\" onSubmit={onSubmit}>\r\n                <input placeholder=\"장소검색\" onChange={onChange} value={inputText} ref={elInput} />\r\n                <button type =\"submit\">\r\n                    검색\r\n                </button>\r\n            </form> \r\n            <MapContainer searchPlace={place} />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default SearchPlace;","import React from 'react';\r\nimport SearchPlace from './SearchPlace'\r\n\r\nconst App = () => {\r\n    return (\r\n        <div>\r\n            <SearchPlace/>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}